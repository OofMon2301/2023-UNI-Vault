{"assets":[{"title":"Main File for Game Development on Embedded Systems","id":"866d62f5-4a30-41ae-af3d-2da5ec1d8bc2","type":"CODE","raw":"/*\r\n * project.c\r\n *\r\n * Main file\r\n *\r\n * Authors: Peter Sutton, Luke Kamols, Jarrod Bennett, Cody Burnett\r\n * Modified by <YOUR NAME HERE>\r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdint.h>\r\n#include <avr/io.h>\r\n#include <avr/interrupt.h>\r\n#include <avr/pgmspace.h>\r\n\r\n#define F_CPU 8000000UL\r\n#include <util/delay.h>\r\n\r\n#include \"game.h\"\r\n#include \"display.h\"\r\n#include \"ledmatrix.h\"\r\n#include \"buttons.h\"\r\n#include \"serialio.h\"\r\n#include \"terminalio.h\"\r\n#include \"timer0.h\"\r\n#include \"timer1.h\"\r\n#include \"timer2.h\"\r\n\r\n// Globals\r\n\r\n// Function prototypes - these are defined below (after main()) in the order\r\n// given here\r\nvoid initialise_hardware(void);\r\nvoid start_screen(void);\r\nvoid new_game(void);\r\nvoid play_game(void);\r\nvoid handle_game_over(void);\r\nvoid handle_firing(void);\r\nvoid cheating(void);\r\n\r\n/////////////////////////////// main //////////////////////////////////\r\nint main(void)\r\n{\r\n\t// Setup hardware and call backs. This will turn on\r\n\t// interrupts.\r\n\tinitialise_hardware();\r\n\r\n\t// Show the splash screen message. Returns when display\r\n\t// is complete.\r\n\tstart_screen();\r\n\r\n\t// Loop forever and continuously play the game.\r\n\twhile (1)\r\n\t{\r\n\t\tnew_game();\r\n\t\tplay_game();\r\n\t\thandle_game_over();\r\n\t}\r\n}\r\n\r\nvoid initialise_hardware(void)\r\n{\r\n\tledmatrix_setup();\r\n\tinit_button_interrupts();\r\n\t// Setup serial port for 19200 baud communication with no echo\r\n\t// of incoming characters\r\n\tinit_serial_stdio(19200, 0);\r\n\r\n\tinit_timer0();\r\n\tinit_timer1();\r\n\tinit_timer2();\r\n\r\n\t// Turn on global interrupts\r\n\tsei();\r\n}\r\n\r\nvoid start_screen(void)\r\n{\r\n\t// Clear terminal screen and output a message\r\n\tclear_terminal();\r\n\thide_cursor();\r\n\tset_display_attribute(FG_WHITE);\r\n\tmove_terminal_cursor(10, 4);\r\n\tprintf_P(PSTR(\" _______    ______  ________  ________  __        ________   ______   __    __  ______  _______  \"));\r\n\tmove_terminal_cursor(10, 5);\r\n\tprintf_P(PSTR(\"|       \\\\  /      \\\\|        \\\\|        \\\\|  \\\\      |        \\\\ /      \\\\ |  \\\\  |  \\\\|      \\\\|       \\\\ \"));\r\n\tmove_terminal_cursor(10, 6);\r\n\tprintf_P(PSTR(\"| $$$$$$$\\\\|  $$$$$$\\\\\\\\$$$$$$$$ \\\\$$$$$$$$| $$      | $$$$$$$$|  $$$$$$\\\\| $$  | $$ \\\\$$$$$$| $$$$$$$\\\\\"));\r\n\tmove_terminal_cursor(10, 7);\r\n\tprintf_P(PSTR(\"| $$__/ $$| $$__| $$  | $$      | $$   | $$      | $$__    | $$___\\\\$$| $$__| $$  | $$  | $$__/ $$\"));\r\n\tmove_terminal_cursor(10, 8);\r\n\tprintf_P(PSTR(\"| $$    $$| $$    $$  | $$      | $$   | $$      | $$  \\\\    \\\\$$    \\\\ | $$    $$  | $$  | $$    $$\"));\r\n\tmove_terminal_cursor(10, 9);\r\n\tprintf_P(PSTR(\"| $$$$$$$\\\\| $$$$$$$$  | $$      | $$   | $$      | $$$$$    _\\\\$$$$$$\\\\| $$$$$$$$  | $$  | $$$$$$$ \"));\r\n\tmove_terminal_cursor(10, 10);\r\n\tprintf_P(PSTR(\"| $$__/ $$| $$  | $$  | $$      | $$   | $$_____ | $$_____ |  \\\\__| $$| $$  | $$ _| $$_ | $$      \"));\r\n\tmove_terminal_cursor(10, 11);\r\n\tprintf_P(PSTR(\"| $$    $$| $$  | $$  | $$      | $$   | $$     \\\\| $$     \\\\ \\\\$$    $$| $$  | $$|   $$ \\\\| $$      \"));\r\n\tmove_terminal_cursor(10, 12);\r\n\tprintf_P(PSTR(\" \\\\$$$$$$$  \\\\$$   \\\\$$   \\\\$$       \\\\$$    \\\\$$$$$$$$ \\\\$$$$$$$$  \\\\$$$$$$  \\\\$$   \\\\$$ \\\\$$$$$$ \\\\$$      \"));\r\n\tmove_terminal_cursor(10, 14);\r\n\t// Printing name and student number\r\n\tprintf_P(PSTR(\"CSSE2010/7201 Project by Jamie Chen - 48093189\"));\r\n\tprintf_P(PSTR(\" \\n\"));\r\n\tprintf_P(PSTR(\"⠀⠀⠘⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀\\n\"));\r\n\tprintf_P(PSTR(\"⠀⠀⠀⠑⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡔⠁⠀⠀⠀\\n\"));\r\n\tprintf_P(PSTR(\"⠀⠀⠀⠀⠈⠢⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠴⠊⠀⠀⠀⠀⠀\\n\"));\r\n\tprintf_P(PSTR(\"⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⢀⣀⣀⣀⣀⣀⡀⠤⠄⠒⠈⠀⠀⠀⠀⠀⠀⠀⠀\\n\"));\r\n\tprintf_P(PSTR(\"⠀⠀⠀⠀⠀⠀⠀⠘⣀⠄⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\n\"));\r\n\tprintf_P(PSTR(\" \\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠛⠋⠉⠈⠉⠉⠉⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⢿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⡏⣀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⢏⣴⣿⣷⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣟⣾⣿⡟⠁⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣷⢢⠀⠀⠀⠀⠀⠀⠀⢸⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⣟⠀⡴⠄⠀⠀⠀⠀⠀⠀⠙⠻⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⠟⠻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠶⢴⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣁⡀⠀⠀⢰⢠⣦⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⡄⠀⣴⣶⣿⡄⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⡋⠀⠀⠀⠎⢸⣿⡆⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⠗⢘⣿⣟⠛⠿⣼\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⠋⢀⡌⢰⣿⡿⢿⡀⠀⠀⠀⠀⠀⠙⠿⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⣧⢀⣼\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣷⢻⠄⠘⠛⠋⠛⠃⠀⠀⠀⠀⠀⢿⣧⠈⠉⠙⠛⠋⠀⠀⠀⣿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣧⠀⠈⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠟⠀⠀⠀⠀⢀⢃⠀⠀⢸⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⡿⠀⠴⢗⣠⣤⣴⡶⠶⠖⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡸⠀⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⡀⢠⣾⣿⠏⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠉⠀⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣧⠈⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⡄⠈⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⣿⣦⣄⣀⣀⣀⣀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠙⣿⣿⡟⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠁⠀⠀⠹⣿⠃⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢐⣿⣿⣿⣿⣿⣿⣿⣿⣿\\n\"));\r\n\tprintf_P(PSTR(\"⣿⣿⣿⣿⠿⠛⠉⠉⠁⠀⢻⣿⡇⠀⠀⠀⠀⠀⠀⢀⠈⣿⣿⡿⠉⠛⠛⠛⠉⠉\\n\"));\r\n\tprintf_P(PSTR(\"⣿⡿⠋⠁⠀⠀⢀⣀⣠⡴⣸⣿⣇⡄⠀⠀⠀⠀⢀⡿⠄⠙⠛⠀⣀⣠⣤⣤⠄\\n\"));\r\n\t// Output the static start screen and wait for a push button\r\n\t// to be pushed or a serial input of 's'\r\n\tshow_start_screen();\r\n\r\n\tuint32_t last_screen_update, current_time;\r\n\tlast_screen_update = get_current_time();\r\n\r\n\tint8_t frame_number = -2 * ANIMATION_DELAY;\r\n\r\n\t// Wait until a button is pressed, or 's' is pressed on the terminal\r\n\twhile (1)\r\n\t{\r\n\t\t// First check for if a 's' is pressed\r\n\t\t// There are two steps to this\r\n\t\t// 1) collect any serial input (if available)\r\n\t\t// 2) check if the input is equal to the character 's'\r\n\t\tchar serial_input = -1;\r\n\t\tif (serial_input_available())\r\n\t\t{\r\n\t\t\tserial_input = fgetc(stdin);\r\n\t\t}\r\n\t\t// If the serial input is 's', then exit the start screen\r\n\t\tif (serial_input == 's' || serial_input == 'S')\r\n\t\t{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t// Next check for any button presses\r\n\t\tint8_t btn = button_pushed();\r\n\t\tif (btn != NO_BUTTON_PUSHED)\r\n\t\t{\r\n\t\t\t// Check whether it is button 0\r\n\t\t\tif (btn == BUTTON0_PUSHED)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// every 200 ms, update the animation\r\n\t\tcurrent_time = get_current_time();\r\n\t\tif (current_time - last_screen_update > 200)\r\n\t\t{\r\n\t\t\tupdate_start_screen(frame_number);\r\n\t\t\tframe_number++;\r\n\t\t\tif (frame_number > ANIMATION_LENGTH)\r\n\t\t\t{\r\n\t\t\t\tframe_number -= ANIMATION_LENGTH + ANIMATION_DELAY;\r\n\t\t\t}\r\n\t\t\tlast_screen_update = current_time;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid new_game(void)\r\n{\r\n\t// Clear the serial terminal\r\n\tclear_terminal();\r\n\r\n\t// Initialise the game and display\r\n\tinitialise_game();\r\n\r\n\t// Clear a button push or serial input if any are waiting\r\n\t// (The cast to void means the return value is ignored.)\r\n\t(void)button_pushed();\r\n\tclear_serial_input_buffer();\r\n}\r\n\r\nvoid play_game(void)\r\n{\r\n\tuint32_t last_flash_time, current_time;\r\n\tint8_t btn; // The button pushed\r\n\r\n\tlast_flash_time = get_current_time();\r\n\r\n\t// We play the game until it's over\r\n\twhile (!is_game_over())\r\n\t{\r\n\t\t// We need to check if any button has been pushed, this will be\r\n\t\t// NO_BUTTON_PUSHED if no button has been pushed\r\n\t\t// Checkout the function comment in buttons.h and the implementation\r\n\t\t// in buttons.c.\r\n\t\tbtn = button_pushed();\r\n\r\n\t\t// Terminal inputs (wasd/WASD)\r\n\t\tchar serial_input = -1;\r\n\t\tif (serial_input_available())\r\n\t\t{\r\n\t\t\tserial_input = fgetc(stdin);\r\n\t\t}\r\n\r\n\t\t// Consolidating movement logic for both button and serial inputs\r\n\t\tint move_x = 0, move_y = 0;\r\n\t\tswitch (btn)\r\n\t\t{\r\n\t\tcase BUTTON0_PUSHED:\r\n\t\t\tmove_x = 1;\r\n\t\t\tbreak; // Move right\r\n\t\tcase BUTTON1_PUSHED:\r\n\t\t\tmove_y = -1;\r\n\t\t\tbreak; // Move up\r\n\t\tcase BUTTON2_PUSHED:\r\n\t\t\tmove_y = 1;\r\n\t\t\tbreak; // Move down\r\n\t\tcase BUTTON3_PUSHED:\r\n\t\t\tmove_x = -1;\r\n\t\t\tbreak; // Move left\r\n\t\t}\r\n\r\n\t\tswitch (serial_input)\r\n\t\t{\r\n\t\tcase 'w':\r\n\t\tcase 'W':\r\n\t\t\tmove_y = 1;\r\n\t\t\tbreak; // Move up\r\n\t\tcase 'a':\r\n\t\tcase 'A':\r\n\t\t\tmove_x = -1;\r\n\t\t\tbreak; // Move left\r\n\t\tcase 's':\r\n\t\tcase 'S':\r\n\t\t\tmove_y = -1;\r\n\t\t\tbreak; // Move down\r\n\t\tcase 'd':\r\n\t\tcase 'D':\r\n\t\t\tmove_x = 1;\r\n\t\t\tbreak; // Move right\r\n\t\tcase 'f':\r\n\t\tcase 'F':\r\n\t\t\t// New: Handle firing\r\n\t\t\thandle_firing();\r\n\t\t\tbreak;\r\n\t\tcase 'c':\r\n\t\tcase 'C':\r\n\t\t\t// Cheating\r\n\t\t\tcheating();\r\n\t\t\tbreak;\r\n\t\tcase '1':\r\n\t\t\t// Segment timer 1\r\n\t\t\tbreak;\r\n\t\tcase '2':\r\n\t\t\t// Segment timer 2\r\n\t\t\tbreak;\r\n\t\tcase '3':\r\n\t\t\t// Segment timer 3\r\n\t\t\tbreak;\r\n\t\tcase '4':\r\n\t\t\t// Segment timer 4\r\n\t\t\tbreak;\r\n\t\tcase '5':\r\n\t\t\t// Segment timer 5\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (move_x != 0 || move_y != 0)\r\n\t\t{\r\n\t\t\tmove_cursor(move_x, move_y);\r\n\t\t\t// see move_cursor(...) in game.c\r\n\t\t\t// Reset flashing time\r\n\t\t\tlast_flash_time = current_time;\r\n\t\t}\r\n\r\n\t\tcurrent_time = get_current_time();\r\n\t\tif (current_time >= last_flash_time + 200)\r\n\t\t{\r\n\t\t\t// 200ms (0.2 second) has passed since the last time we advance the\r\n\t\t\t// notes here, so update the advance the notes\r\n\t\t\tflash_cursor();\r\n\r\n\t\t\t// Update the most recent time the notes were advance\r\n\t\t\tlast_flash_time = current_time;\r\n\t\t}\r\n\t}\r\n\t// We get here if the game is over.\r\n}\r\n\r\nvoid handle_game_over()\r\n{\r\n\tmove_terminal_cursor(10, 14);\r\n\tprintf_P(PSTR(\"GAME OVER\"));\r\n\tmove_terminal_cursor(10, 15);\r\n\tprintf_P(PSTR(\"Press a button or 's'/'S' to start a new game\"));\r\n\r\n\t// Do nothing until a button is pushed. Hint: 's'/'S' should also start a\r\n\t// new game\r\n\twhile (button_pushed() == NO_BUTTON_PUSHED)\r\n\t{\r\n\t\t; // wait\r\n\t}\r\n\r\n\t// NOT YET IMPLEMENTED\r\n\r\n\t// move_terminal_cursor(10, 14);\r\n\t// printf(\"GAME OVER\");\r\n\r\n\t// // Colour locations which have not been fired upon\r\n\t// for (uint8_t y = 0; y < GRID_NUM_ROWS; y++)\r\n\t// {\r\n\t// \tfor (uint8_t x = 0; x < GRID_NUM_COLUMNS; x++)\r\n\t// \t{\r\n\t// \t\tif (computer_grid_hits[y][x] == 0)\r\n\t// \t\t{\r\n\t// \t\t\tledmatrix_draw_pixel_in_computer_grid(x, y, COLOUR_GREEN);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n\t// // Colour Locations which have been hit\r\n\t// for (uint8_t y = 0; y < GRID_NUM_ROWS; y++)\r\n\t// {\r\n\t// \tfor (uint8_t x = 0; x < GRID_NUM_COLUMNS; x++)\r\n\t// \t{\r\n\t// \t\tif (computer_grid_hits[y][x] == 1)\r\n\t// \t\t{\r\n\t// \t\t\tledmatrix_draw_pixel_in_computer_grid(x, y, COLOUR_ORANGE);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n\t// // Turn off cursor and flashing cursor\r\n\t// cursor_on = 0;\r\n\t// flash_cursor();\r\n}\r\n","language":"c","time":"2 months ago","created":"2024-05-21T04:42:20.922Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"85f3c592-82cb-46fd-9cfe-c44007a932bb","created":{"value":"2024-05-21T04:42:22.332Z","readable":"2 months ago"},"updated":{"value":"2024-05-21T04:42:22.332Z","readable":"2 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"866d62f5-4a30-41ae-af3d-2da5ec1d8bc2"},"type":"DESCRIPTION","text":"This code snippet is a program that initializes the hardware, start screen, play game, and handle firing. It also includes functions to initialize their boards with interrupts for Peter Sutton, Luke Kamols, Jarrod Bennett","model":{"id":"581bb95c-a270-412c-ab92-e1a2ee09e812"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"97410ada-79b9-42a7-b987-b0901fa7ebfe","created":{"value":"2024-05-21T04:42:34.025Z","readable":"2 months ago"},"updated":{"value":"2024-05-21T04:42:34.025Z","readable":"2 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"866d62f5-4a30-41ae-af3d-2da5ec1d8bc2"},"type":"DESCRIPTION","text":"Main file for a game development project on embedded systems using C programming language. Includes hardware initialization, game setup, gameplay logic, and game over handling.","model":{"id":"581bb95c-a270-412c-ab92-e1a2ee09e812"}}],"updated":"2024-05-21T04:42:34.093Z"},{"title":"Game State and Features Functionality","id":"24678390-bc3d-4909-9340-27588fd3714b","type":"CODE","raw":"/*\r\n * game.c\r\n *\r\n * Functionality related to the game state and features.\r\n *\r\n * Author: Jarrod Bennett, Cody Burnett\r\n */\r\n\r\n#include \"game.h\"\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <stdint.h>\r\n#include \"display.h\"\r\n#include \"ledmatrix.h\"\r\n#include \"terminalio.h\"\r\n\r\nuint8_t human_grid[GRID_NUM_ROWS][GRID_NUM_COLUMNS];\r\nuint8_t computer_grid[GRID_NUM_ROWS][GRID_NUM_COLUMNS];\r\nuint8_t cursor_x, cursor_y;\r\nuint8_t cursor_on;\r\n\r\n// Initialise the game by resetting the grid and beat\r\nvoid initialise_game(void)\r\n{\r\n\t// clear the splash screen art\r\n\tledmatrix_clear();\r\n\r\n\t// see \"Human Turn\" feature for how ships are encoded\r\n\t// fill in the grid with the ships\r\n\tuint8_t initial_computer_grid[GRID_NUM_ROWS][GRID_NUM_COLUMNS] =\r\n\t\t{{SEA, SEA, SEA, SEA, SEA, SEA, SEA, SEA},\r\n\t\t {SEA, CARRIER | HORIZONTAL | SHIP_END, CARRIER | HORIZONTAL, CARRIER | HORIZONTAL, CARRIER | HORIZONTAL, CARRIER | HORIZONTAL, CARRIER | HORIZONTAL | SHIP_END, SEA},\r\n\t\t {SEA, SEA, SEA, SEA, SEA, SEA, SEA, SEA},\r\n\t\t {SEA, SEA, CORVETTE | SHIP_END, SEA, SEA, SUBMARINE | SHIP_END, SEA, SEA},\r\n\t\t {DESTROYER | SHIP_END, SEA, CORVETTE | SHIP_END, SEA, SEA, SUBMARINE | SHIP_END, SEA, FRIGATE | SHIP_END},\r\n\t\t {DESTROYER, SEA, SEA, SEA, SEA, SEA, SEA, FRIGATE},\r\n\t\t {DESTROYER | SHIP_END, SEA, CRUISER | HORIZONTAL | SHIP_END, CRUISER | HORIZONTAL, CRUISER | HORIZONTAL, CRUISER | HORIZONTAL | SHIP_END, SEA, FRIGATE | SHIP_END},\r\n\t\t {SEA, SEA, SEA, SEA, SEA, SEA, SEA, SEA}};\r\n\tuint8_t initial_human_grid[GRID_NUM_ROWS][GRID_NUM_COLUMNS] =\r\n\t\t{{SEA, SEA, SEA, SEA, SEA, SEA, SEA, SEA},\r\n\t\t {DESTROYER | SHIP_END, SEA, CRUISER | HORIZONTAL | SHIP_END, CRUISER | HORIZONTAL, CRUISER | HORIZONTAL, CRUISER | HORIZONTAL | SHIP_END, SEA, FRIGATE | SHIP_END},\r\n\t\t {DESTROYER, SEA, SEA, SEA, SEA, SEA, SEA, FRIGATE},\r\n\t\t {DESTROYER | SHIP_END, SEA, CORVETTE | SHIP_END, SEA, SEA, SUBMARINE | SHIP_END, SEA, FRIGATE | SHIP_END},\r\n\t\t {SEA, SEA, CORVETTE | SHIP_END, SEA, SEA, SUBMARINE | SHIP_END, SEA, SEA},\r\n\t\t {SEA, SEA, SEA, SEA, SEA, SEA, SEA, SEA},\r\n\t\t {SEA, CARRIER | HORIZONTAL | SHIP_END, CARRIER | HORIZONTAL, CARRIER | HORIZONTAL, CARRIER | HORIZONTAL, CARRIER | HORIZONTAL, CARRIER | HORIZONTAL | SHIP_END, SEA},\r\n\t\t {SEA, SEA, SEA, SEA, SEA, SEA, SEA, SEA}};\r\n\tfor (uint8_t i = 0; i < GRID_NUM_COLUMNS; i++)\r\n\t{\r\n\t\tfor (uint8_t j = 0; j < GRID_NUM_COLUMNS; j++)\r\n\t\t{\r\n\t\t\thuman_grid[j][i] = initial_human_grid[j][i];\r\n\t\t\tcomputer_grid[j][i] = initial_computer_grid[j][i];\r\n\t\t\tif (human_grid[j][i] & SHIP_MASK)\r\n\t\t\t{\r\n\t\t\t\tledmatrix_draw_pixel_in_human_grid(i, j, COLOUR_ORANGE);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tcursor_x = 3;\r\n\tcursor_y = 3;\r\n\tcursor_on = 1;\r\n}\r\n\r\nvoid flash_cursor(void)\r\n{\r\n\t// Check if cursor is on miss/hit location\r\n\t// If so, display red or green\r\n\t// If not, display yellow\r\n\tcursor_on = 1 - cursor_on;\r\n\tif (cursor_on)\r\n\t{\r\n\t\tledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_YELLOW);\r\n\t}\r\n\telse if (0) // test for hit ship here, then duplicate and modify to test for sunken ship\r\n\t{\r\n\t\tledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_RED);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_BLACK);\r\n\t}\r\n}\r\n\r\n// moves the position of the cursor by (dx, dy) such that if the cursor\r\n// started at (cursor_x, cursor_y) then after this function is called,\r\n// it should end at ( (cursor_x + dx) % WIDTH, (cursor_y + dy) % HEIGHT)\r\n// the cursor should be displayed after it is moved as well\r\nvoid move_cursor(int8_t dx, int8_t dy)\r\n{\r\n\t// YOUR CODE HERE\r\n\t/*suggestions for implementation:\r\n\t * 1: remove the display of the cursor at the current location\r\n\t *\t\t(and replace it with whatever piece is at that location)\r\n\t * 2: update the positional knowledge of the cursor, this will include\r\n\t *\t\tvariables cursor_x, cursor_y and cursor_visible. Make sure you\r\n\t *\t\tconsider what should happen if the cursor moves off the board.\r\n\t * 3: display the cursor at the new location\r\n\t * 4: reset the cursor flashing cycle. See project.c for how the cursor\r\n\t *\t\tis flashed.\r\n\t */\r\n\t// Remove cursor display of current location\r\n\tcursor_on = 0;\r\n\t// Replace with whatever the original piece was (if hit, display red, if nothing, display black, if miss, display green\r\n\tledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_BLACK);\r\n\t// Update cursor position after B0,B1,B2, or B3 is pressed, ensuring wrapping\r\n\tcursor_x = (cursor_x + dx + GRID_NUM_COLUMNS) % GRID_NUM_COLUMNS;\r\n\tcursor_y = (cursor_y + dy + GRID_NUM_ROWS) % GRID_NUM_ROWS;\r\n\t// Display cursor at new location\r\n\tledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_YELLOW);\r\n}\r\n\r\n// Returns 1 if the game is over, 0 otherwise.\r\nuint8_t is_game_over(void)\r\n{\r\n\t// YOUR CODE HERE\r\n\t// Detect if the game is over i.e. if a player has won.\r\n\treturn 0;\r\n}\r\n\r\nvoid check_for_hit(void)\r\n{\r\n\t// Check for bits. The three least significant bits determine what is in that location, with 000 being no ship, and 001 through 110 enumerating the ship types. The next bit is 1 if the location contains the end of a ship. Then the next bit is 1 if the ship is horizontal, or 0 if the ship is vertical.\r\n\t// Check for a hit in the computer grid and display the result with the appropriate colour.\r\n\t// Check if the location contains a ship. If so, display red. If not, display green.\r\n\r\n\t// Hit (Carrier, Cruiser, Destroyer, Frigate, Corvette, Submarine, and Ship Mask)\r\n\tif (computer_grid[cursor_y][cursor_x] & SHIP_MASK)\r\n\t{\r\n\r\n\t\t// Light up location red and keep it there\r\n\t\tledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_RED);\r\n\t}\r\n\t// Miss (Sea)\r\n\telse\r\n\t{\r\n\t\tledmatrix_draw_pixel_in_computer_grid(cursor_x, cursor_y, COLOUR_GREEN);\r\n\t}\r\n}","language":"c","time":"3 months ago","created":"2024-05-14T03:48:30.058Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"30817e1e-9b9f-4fc8-9d7e-40f4105bde58","created":{"value":"2024-05-14T03:48:31.169Z","readable":"3 months ago"},"updated":{"value":"2024-05-14T03:48:31.169Z","readable":"3 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"24678390-bc3d-4909-9340-27588fd3714b"},"type":"DESCRIPTION","text":"This code snippet initializes a game by resetting the splash screen art, filling it with ships in an array. It also sets up some variables for each column and stores them in two arrays: \"human_grid\" and \"computer_grid\". The","model":{"id":"581bb95c-a270-412c-ab92-e1a2ee09e812"}},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"d4d28199-3f12-4cbf-8cfa-c25f9991084f","created":{"value":"2024-05-14T03:48:51.839Z","readable":"3 months ago"},"updated":{"value":"2024-05-14T03:48:51.839Z","readable":"3 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"24678390-bc3d-4909-9340-27588fd3714b"},"type":"DESCRIPTION","text":"Functionality related to the game state, grid manipulation, and cursor movement in a game.","model":{"id":"581bb95c-a270-412c-ab92-e1a2ee09e812"}}],"updated":"2024-05-21T04:42:21.047Z","share":"https://61e80399-bb56-4b84-9a7a-135812865ff6.pieces.cloud/?p=47014f8e39"},{"title":"PNG Image with Text","id":"c1d5c425-ca46-450b-be00-4505401b5429","type":"IMAGE","raw":"","language":"text","time":"3 months ago","created":"2024-04-30T12:58:16.951Z","annotations":[],"updated":"2024-04-30T12:58:23.339Z"},{"title":"Get Value","id":"4778ed03-b367-417e-9035-fc9a3fdc8015","type":"CODE","raw":"interface MyInterface {\n  id: number;\n  name: string;\n  properties: string[];\n}\n\nconst myObject: MyInterface = {\n  id: 1,\n  name: 'foo',\n  properties: ['a', 'b', 'c']\n};\n\nfunction getValue(value: keyof MyInterface) {\n  return myObject[value];\n}\n\ngetValue('id'); // 1\ngetValue('count')","language":"ts","time":"3 months ago","created":"2024-04-28T22:18:40.854Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"f9b14653-6a70-4ea9-be81-98da08ca4a3d","created":{"value":"2024-04-28T22:18:40.709Z","readable":"3 months ago"},"updated":{"value":"2024-04-28T22:18:40.709Z","readable":"3 months ago"},"mechanism":"MANUAL","asset":{"id":"4778ed03-b367-417e-9035-fc9a3fdc8015"},"type":"DESCRIPTION","text":"Get value of an object with an interface. From The Pieces TypeScript Collection."}],"updated":"2024-04-29T01:09:46.831Z"},{"title":"Store record as a string with interface","id":"369fe4e6-7282-458a-99d1-55ce36078a33","type":"CODE","raw":"const myTypedObject: Record<string, MyInterface> = {\n  first: {...},\n  second: {...},\n  ...\n};","language":"ts","time":"3 months ago","created":"2024-04-28T22:18:40.854Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"4272fc42-8f75-4c9d-a823-f8085ceb76ce","created":{"value":"2024-04-28T22:18:40.709Z","readable":"3 months ago"},"updated":{"value":"2024-04-28T22:18:40.709Z","readable":"3 months ago"},"mechanism":"MANUAL","asset":{"id":"369fe4e6-7282-458a-99d1-55ce36078a33"},"type":"DESCRIPTION","text":"Map a string key to a custom interface in an object. From The Pieces TypeScript Collection."}],"updated":"2024-04-28T22:18:40.858Z"},{"title":"Removes Duplicates from an Array","id":"b4a96255-3ef4-4c87-9894-285365347cc9","type":"CODE","raw":"const unique = [...new Set(array)];","language":"js","time":"3 months ago","created":"2024-04-28T22:18:30.426Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"958dae79-0a9a-48ba-a606-c98f7c4002ab","created":{"value":"2024-04-28T22:18:30.242Z","readable":"3 months ago"},"updated":{"value":"2024-04-28T22:18:30.242Z","readable":"3 months ago"},"mechanism":"MANUAL","asset":{"id":"b4a96255-3ef4-4c87-9894-285365347cc9"},"type":"DESCRIPTION","text":"Remove duplicates from an array using a Set. From The Pieces JavaScript Collection."}],"updated":"2024-04-28T22:18:30.434Z"},{"title":"Difference","id":"677a1288-aab2-4f4e-9a07-793646c74e25","type":"CODE","raw":"const difference = (a, b) => {\n  const s = new Set(b);\n  return a.filter(x => !s.has(x));\n};\n\ndifference([1, 2, 3], [1, 2, 4]); // [3]","language":"js","time":"3 months ago","created":"2024-04-28T22:18:30.426Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"23f79979-0504-48de-a4c9-1f1c43746b61","created":{"value":"2024-04-28T22:18:30.242Z","readable":"3 months ago"},"updated":{"value":"2024-04-28T22:18:30.242Z","readable":"3 months ago"},"mechanism":"MANUAL","asset":{"id":"677a1288-aab2-4f4e-9a07-793646c74e25"},"type":"DESCRIPTION","text":"Finds the difference between two arrays. From The Pieces JavaScript Collection."}],"updated":"2024-04-28T22:18:30.430Z"},{"title":"Merge Any Numbers of lists into lists of lists","id":"64ed016f-a1dd-41da-b3fc-5919b5753b4d","type":"CODE","raw":"def merge(*args, missing_val = None):\n  max_length = max([len(lst) for lst in args])\n  out_list = []\n\n  for i in range(max_length):\n    out_list.append([args[k][i] if i < len(args[k]) else missing_val for k in range(len(args))])\n\n  return out_list","language":"py","time":"3 months ago","created":"2024-04-23T07:26:05.573Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"e1e66798-245f-44ef-9ea7-f7f8dbe2f6d2","created":{"value":"2024-04-23T07:26:05.422Z","readable":"3 months ago"},"updated":{"value":"2024-04-23T07:26:05.422Z","readable":"3 months ago"},"mechanism":"MANUAL","asset":{"id":"64ed016f-a1dd-41da-b3fc-5919b5753b4d"},"type":"DESCRIPTION","text":"Merge a series of lists into a list of lists. For example, [1, 2, 3] and [4, 5, 6] would merge into [[1, 2, 3], [4, 5, 6]]. From The Pieces Python Collection."}],"updated":"2024-04-23T07:26:05.590Z"},{"title":"Check if a file exists","id":"8a216a29-c207-41f2-98f1-8f94723af15e","type":"CODE","raw":"from os import path\n\ndef check_for_file(file_name):\n\tprint(\"File exists: \", path.exists(file_name))","language":"py","time":"3 months ago","created":"2024-04-23T07:26:05.573Z","annotations":[{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"85ba069a-23a3-4803-97ee-ff30d704b929","created":{"value":"2024-04-23T07:26:05.422Z","readable":"3 months ago"},"updated":{"value":"2024-04-23T07:26:05.422Z","readable":"3 months ago"},"mechanism":"AUTOMATIC","asset":{"id":"8a216a29-c207-41f2-98f1-8f94723af15e"},"type":"DESCRIPTION","text":"Check if a file exists in pieces python collection, file and python\nfrom os import path"},{"schema":{"migration":0,"semantic":"MAJOR_0_MINOR_0_PATCH_1"},"id":"8e35ef57-ff29-4fa4-8ad9-151c3e767d6b","created":{"value":"2024-04-23T07:26:05.422Z","readable":"3 months ago"},"updated":{"value":"2024-04-23T07:26:05.422Z","readable":"3 months ago"},"mechanism":"MANUAL","asset":{"id":"8a216a29-c207-41f2-98f1-8f94723af15e"},"type":"DESCRIPTION","text":"Checks if a file exists or not. From The Pieces Python Collection.\n\n💡 Smart Description: Check if a file exists in pieces python collection, file and python\nfrom os import path"}],"updated":"2024-04-29T00:48:37.217Z"}],"gptContexts":[],"gptFolderNames":[],"enrichedCode":{},"remoteCopilotState":""}